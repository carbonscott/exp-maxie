import os
import sys
import subprocess

import hydra
from omegaconf import DictConfig

from jinja2 import Environment, FileSystemLoader

from dataclasses import dataclass

@hydra.main(config_path="sbatch_config", config_name="base", version_base=None)
def main(cfg: DictConfig):
    env             = Environment(loader=FileSystemLoader(cfg.dir_sbatch_template))
    template        = env.get_template(cfg.file_sbatch_template)
    rendered_script = template.render(
        qos              = cfg.qos,
        walltime         = cfg.walltime,
        job              = cfg.job,
        sbatch_num_cpus  = cfg.sbatch_num_cpus,
        sbatch_num_nodes = cfg.sbatch_num_nodes,
        num_tasks        = cfg.sbatch_num_cpus * cfg.sbatch_num_nodes,
        exp              = cfg.exp,
        num_runs         = cfg.num_runs + 1,  # range is not right inclusive
        detector_name    = cfg.detector_name,
    )

    print("Generated BSUB Script:")
    print(rendered_script)
    print()

    os.makedirs(cfg.dir_sbatch_jobs, exist_ok = True)
    path_sbatch_job = os.path.join(cfg.dir_sbatch_jobs, cfg.file_sbatch_job)
    with open(path_sbatch_job, 'w') as fh:
        fh.write(rendered_script)

        fh.write("\n")
        end_note = '# THIS SCRIPT IS GENERATED BY EXECUTING: \n# python ' + ' '.join(sys.argv)
        fh.write(end_note)

    # Executing the sbatch script
    sbatch_command = f"sbatch {path_sbatch_job}"
    print(sbatch_command)
    os.system(sbatch_command)

if __name__ == "__main__":
    main()

